package com.geekbar.admin.modules.biz.controller;

import com.lemon.common.utils.R;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.script.Invocable;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Pattern;

@RestController
@RequestMapping("/biz/google")
public class GoogleController {

    private static final String url = "http://translate.google.cn/translate_a/single";

    public static Pattern pattern = Pattern.compile("\\[\\[\\[\"([\\w\\W]*)\",\"");

    @RequestMapping(value = "/translation", method = RequestMethod.POST)
    public R translation(@RequestParam("content") String content) {
        String from = "zh-CN";
        String to = "en";
        String tk = token(content);
        //创建一个map对象存储数据
        Map<String, String> params = new HashMap<String, String>();
        params.put("client", "t");
        params.put("sl", from);
        params.put("tl", to);
        params.put("hl", "zh-CN");
        params.put("dt", "at");
        params.put("dt", "bd");
        params.put("dt", "ex");
        params.put("dt", "ld");
        params.put("dt", "md");
        params.put("dt", "qca");
        params.put("dt", "rw");
        params.put("dt", "rm");
        params.put("dt", "ss");
        params.put("dt", "t");
        params.put("ie", "UTF-8");
        params.put("oe", "UTF-8");
        params.put("source", "btn");
        params.put("ssel", "0");
        params.put("tsel", "0");
        params.put("kc", "0");
        params.put("tk", tk);
        params.put("q", content);

        CloseableHttpClient httpClient = HttpClients.createDefault();

        try {
            URIBuilder uri = new URIBuilder(url);
            for (String key : params.keySet()) {
                String value = params.get(key);
                uri.addParameter(key, value);
            }
            CloseableHttpResponse response = null;
            synchronized (this) {
                HttpUriRequest request = new HttpGet(uri.toString());
                response = httpClient.execute(request);
                Thread.sleep(1000);
            }

            HttpEntity entity = response.getEntity();
            String result = EntityUtils.toString(entity, "utf-8");
            String substring = result.substring(4, result.indexOf("\",\""));
            EntityUtils.consume(entity);
            response.getEntity().getContent().close();
            response.close();
            return R.ok().data(substring);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return R.error("系统报错");

    }

    private static String token(String value) {
        String result = "";
        ScriptEngine engine = new ScriptEngineManager().getEngineByName("js");
        try {
            String path = GoogleController.class.getClassLoader().getResource("js/google.js").getPath();
            FileReader reader = new FileReader(path);
            engine.eval(reader);

            if (engine instanceof Invocable) {
                Invocable invoke = (Invocable) engine;
                result = String.valueOf(invoke.invokeFunction("token", value));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return result;
    }

}
